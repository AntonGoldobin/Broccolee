const Telegraf = require("telegraf");
const cron = require("node-cron");
const _ = require("lodash");
const { saveUniquePostsIds } = require("../../db/models/savePostId");
const { getPostsIds } = require("../../db/models/getPostsId");

let startDailyPosting = null;

const botName = "who-is-gay";
const botToken = "1646739103:AAHX1YS--WalviQ2r6i17oCtuhqHnlBf7Oc";
const channelId = "-461375734";

const members = [ "Codeavr", "dzerayeah", "furfury", "darrrouge", "dianastn", "NemnogoDobra" ];

const start = () => {
	const bot = new Telegraf(botToken, { username: "who_gay_bot" });

	startDailyPosting = cron.schedule("0 10 * * *", () => {
		const chosenUser = getDailyGay();
		const bestGayListMessage = `‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è \n\n –ü–ò–î–û–† –î–ù–Ø - @${chosenUser} \n \n‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è`;

		bot.telegram.sendMessage(channelId, bestGayListMessage);

		const member = { url: chosenUser, created: Date.now() };
		saveUniquePostsIds(member, botName);
	});

	// Clearing offline commands by bot (IMPORTANT)
	bot.use(async (ctx, next) => {
		if (_.get(ctx, "update.message.date") && ctx.update.message.date * 1000 < Date.now() - 5000) {
			return false;
		}
		await next();
	});

	// bot.on("message", async (ctx) => {});

	bot.command("top3", (ctx) => {
		getPostsIds(botName)
			.then((data) => ctx.telegram.sendMessage(ctx.update.message.chat.id, getTopList(data, 3)))
			.catch((err) => console.log("who is gay mongo: " + err));
	});

	bot.command("top", (ctx) => {
		getPostsIds(botName)
			.then((data) => ctx.telegram.sendMessage(ctx.update.message.chat.id, getTopList(data, "all")))
			.catch((err) => console.log("who is gay mongo: " + err));
	});

	bot.command("daygay", (ctx) => {
		getPostsIds(botName)
			.then((data) => ctx.telegram.sendMessage(ctx.update.message.chat.id, getCurrentGay(data)))
			.catch((err) => console.log("who is gay mongo: " + err));
	});

	bot.launch();
};

const getCurrentGay = (data) => {
	if (data.length == 0) return "";
	const member = data.sort((a, b) => b.createdAt - a.createdAt)[0];
	return `${getRandomPhrase()} - @${member.url} - ${data.filter((m) => member.url === m.url).length} points`;
};

const getTopList = (data, count) => {
	let topList = [];
	members.forEach((member) => {
		topList.push({ name: member, pp: data.filter((m) => member === m.url).length });
	});
	const sortedTopList = topList.sort((a, b) => b.pp - a.pp);

	let messageList = "–¢–û–ü –õ–ò–°–¢ –ü–ò–î–û–†–û–í \n\n";

	for (let i = 0; i < (count === "all" ? members.length : count); i++) {
		const member = sortedTopList[i];
		messageList += `${i === 0 ? "üëë " : "      "} ${i + 1} @${member.name}: ${member.pp} points \n\n`;
	}

	return messageList;
};

const getRandomPhrase = () => {
	const phrases = [
		"–ü–ò–î–û–† –î–ù–Ø",
		"–•–æ–±–∞! –ü–ò–î–û–†",
		"–ö–∞–∫–æ–µ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è? –í—Ä–µ–º—è –±—ã—Ç—å –ü–ò–î–û–†–û–ú",
		"–°–∫–æ–ª—å–∫–æ –≤–æ–ª–∫–∞ –Ω–µ –∫–æ—Ä–º–∏, –∞ —Å–º–æ—Ç—Ä–∏—Ç, —á—Ç–æ –ü–ò–î–û–†",
		"–°–µ–º—å —Ä–∞–∑ –æ—Ç–º–µ—Ä—å, –æ–¥–∏–Ω —Ä–∞–∑ –ü–ò–î–û–†",
		"–õ—é–±–∏—à—å –∫–∞—Ç–∞—Ç—å—Å—è, –∞ –≤—Å–µ—Ä–∞–≤–Ω–æ –ü–ò–î–û–†",
		"–í—Å—Ç—Ä–µ—á–∞—é—Ç –ø–æ –æ–¥–µ–∂–∫–µ, –∞ –ø—Ä–æ–≤–æ–∂–∞—é—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –ü–ò–î–û–†",
		"–û–¥–Ω–∞ –≥–æ–ª–æ–≤–∞ —Ö–æ—Ä–æ—à–æ, –∞ –ª—É—á—à–µ, –∫–æ–≥–¥–∞ –ü–ò–î–û–†",
		"–ö—Ç–æ —Å –º–µ—á–æ–º –∫ –Ω–∞–º –ø—Ä–∏–¥–µ—Ç, —Ç–æ—Ç –ü–ò–î–û–†",
		"–°–¥–µ–ª–∞–ª –¥–µ–ª–æ, —Å—Ç–∞–ª –ü–ò–î–û–†–û–ú",
		"–°–ª–æ–≤–æ –Ω–µ –≤–æ—Ä–æ–±–µ–π, –∞ –≤–æ—Ç –ü–ò–î–û–†",
		"–¢–∏—à–µ –µ–¥–µ—à—å, –±—É–¥–µ—à—å –ü–ò–î–û–†–û–ú",
		"–ù–µ —Ä–æ–π –¥—Ä—É–≥–æ–º—É —è–º—É, —Å—Ç–∞–Ω–µ—à—å –ü–ò–î–û–†–û–ú",
	];
	return _.sample(phrases);
};

const getDailyGay = () => {
	return _.sample(members);
};

module.exports.start = start;
